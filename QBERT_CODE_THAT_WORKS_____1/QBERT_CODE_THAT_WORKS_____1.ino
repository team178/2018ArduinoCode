#include <Adafruit_NeoPixel.h>
#include <Adafruit_GFX.h>
#include <Adafruit_NeoMatrix.h>
#ifdef __AVR__
  #include <avr/power.h>
#endif

#define PIN 7

Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16,16, PIN, NEO_MATRIX_TOP + NEO_MATRIX_RIGHT + NEO_MATRIX_COLUMNS + NEO_MATRIX_ZIGZAG, NEO_GRB + NEO_KHZ800);
//Adafruit_NeoMatrix matrix = Adafruit_NeoMatrix(16, 16, PIN,
  //NEO_MATRIX_TOP     + NEO_MATRIX_RIGHT +
  //NEO_MATRIX_COLUMNS + NEO_MATRIX_PROGRESSIVE,
  //NEO_GRB            + NEO_KHZ800);

int x = 0;
unsigned int tempRed;
unsigned int tempGreen; 
unsigned int tempBlue;

const PROGMEM uint16_t rgbRed[]  ={0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,255,255,255,204,204,255,255,204,204,255,255,255,0,0,0,0,255,255,204,255,255,255,255,255,255,204,255,255,0,0,0,0,255,255,255,0,240,255,255,0,240,255,255,255,0,0,0,0,255,255,255,240,204,255,255,240,204,255,255,255,0,0,0,0,255,255,255,255,255,255,255,255,204,255,255,255,0,0,0,0,255,255,255,255,255,255,204,255,255,204,255,255,0,0,0,0,255,255,204,255,255,255,255,204,255,89,204,255,0,0,0,0,255,255,255,204,255,255,255,255,204,204,255,255,0,0,0,0,0,255,255,255,181,255,255,181,255,255,255,0,0,0,0,0,0,0,255,255,181,204,255,181,204,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
const PROGMEM uint16_t  rgbGreen[] ={50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,30,30,30,30,30,30,30,30,50,50,50,50,50,50,50,30,255,255,255,255,255,255,255,255,30,50,50,50,50,50,30,255,255,255,87,87,87,87,255,255,255,30,50,50,50,30,255,255,255,67,67,87,87,67,67,255,255,255,30,50,50,30,255,255,67,87,87,87,87,87,87,67,255,255,30,50,50,30,255,255,87,0,240,87,87,0,240,87,255,255,30,50,50,30,255,255,87,240,199,87,87,240,199,87,255,255,30,50,50,30,255,255,87,87,87,87,152,152,67,87,255,255,30,50,50,30,255,255,87,87,87,87,67,152,152,67,255,255,30,50,50,30,255,255,67,87,87,87,87,67,152,28,67,255,30,50,50,30,255,255,255,67,87,87,87,87,67,67,255,255,30,50,50,50,30,255,255,255,65,255,255,65,255,255,255,30,50,50,50,50,50,30,255,255,65,67,255,65,67,255,30,50,50,50,50,50,50,50,30,30,30,30,30,30,30,30,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50};
const PROGMEM uint16_t  rgbBlue[] ={143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,86,86,86,86,86,86,86,86,143,143,143,143,143,143,143,86,255,255,255,255,255,255,255,255,86,143,143,143,143,143,86,255,255,255,34,34,34,34,255,255,255,86,143,143,143,86,255,255,255,4,4,34,34,4,4,255,255,255,86,143,143,86,255,255,4,34,34,34,34,34,34,4,255,255,86,143,143,86,255,255,34,0,240,34,34,0,240,34,255,255,86,143,143,86,255,255,34,240,196,34,34,240,196,34,255,255,86,143,143,86,255,255,34,34,34,34,0,0,4,34,255,255,86,143,143,86,255,255,34,34,34,34,4,0,0,4,255,255,86,143,143,86,255,255,4,34,34,34,34,4,0,0,4,255,86,143,143,86,255,255,255,4,34,34,34,34,4,4,255,255,86,143,143,143,86,255,255,255,11,255,255,11,255,255,255,86,143,143,143,143,143,86,255,255,11,4,255,11,4,255,86,143,143,143,143,143,143,143,86,86,86,86,86,86,86,86,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143};

void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  matrix.begin();
  
  matrix.show(); // Initialize all pixels to 'off'
  matrix.setBrightness(30);
}

void loop() 
{
  // put your main code here, to run repeatedly:
 if (x <255)
 {
for(int row=0; row<=15; row++)
{
  for(int col=0; col<=15; col++)
{
tempRed = pgm_read_word_near(rgbRed + x);
tempGreen = pgm_read_word_near(rgbGreen + x);
tempBlue = pgm_read_word_near(rgbBlue + x);
  matrix.drawPixel(row,col, matrix.Color(tempRed,tempGreen,tempBlue));
  //matrix.drawPixel(x +(y*16),y, matrix.Color(rgbRed[x],rgbGreen[x],rgbBlue[x]));
  //matrix.drawPixel(x +(y*16),y, matrix.Color(rgbRed[x],rgbGreen[x],rgbBlue[x]));
  matrix.show();
Serial.print(tempRed);
Serial.print(tempGreen);
Serial.print(tempBlue);

 
  x++;
  }
}
}
}
